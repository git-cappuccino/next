Server side rendering - It is needed for the below listed reasons:
1. When the page should be pre-rendered for every incoming request at the server and pre-generated pages are not capable enough to fulfil the requirements. For eg. If the data to be populated in the page component changes too frequently such that getStaticProps even along with revalidate field will be useless.
2. When there is the need to access the request object reaching the server in order to access the cookie or header data.
3. When there is a need to manipulate the response to be sent back.

getServerSideProps is a function which helps to achieve all the above.

This method is invoked only at the server after the deployment for every incoming request at the server. It is not executed during the build time. This method returns a similar object as that of getStaticProps and hence will populate the props of the page-component accordingly. In a file there can either exist getStaticPaths function or getServerSideProps function, but both cannot exist at te same time.

getServerSideProps function has access to the incoming request object, outgoing response object and the params object through the context parameter. The context object received as the parameter in the getServerSideProps has properties namely: req, res, params. This function returns an object with fields namely: props, notFound, redirect, but cannot have revalidate key.

There is no need to provide the getStaticPaths function along with the getServerSideProps in case of dynamic page-component file, as there is no pre-generation of page-instances, instead the pages are rendered JIT, when the request is received.

By default NextJs always pre-generates and caches all the pages on the server, but not when we provide getServerSideProps. Hence providing the getStaticProps or even omitting it will stil makes the page to be pre-generated.

Client-side data fetching combined with static page regeneration:
Provide the API Endpoint data fetching logic in the getStaticProps and inside page-component as well, so that the initial pre-generated page contains the data, and later on after the page hydration the client-side data fetching logic will come into play.

We can insert the essential tags required inside the head tag of the pre-generated page, served by the server using the <Head> Component provided by the NextJs. Whichever child tags we provide inside the Head Component, they will be injected under the head tag of the page.

<Head>
  <title>Next Application</title>
  <meta name="description" content="Description to be shown under the page-link made available in search results" />
</Head>

MyApp component will be rendered by the NextJs for every page-component when it has to be loaded. The Component prop received in the MyApp is the page-component.

_document.js is used to customize the entire HTML document. This file is not present by default.

Image component provided by NextJs creates various image versions optimized in terms of image-file-size for various device-sizes JIT when the request is received. This image version will be cached for future requests.
